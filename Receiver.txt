#include "BluetoothSerial.h"

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run make menuconfig to and enable it
#endif

BluetoothSerial SerialBT;
int enableRightMotor=22; 
int rightMotorPin1 = 16;
int rightMotorPin2 = 17;
// Left motor
int enableLeftMotor=23;
int leftMotorPin1 = 18;
int leftMotorPin2 = 19;

#define MAX_MOTOR_SPEED 200

const int PWMFreq = 1000; /* 1 KHz */
const int PWMResolution = 8;
const int rightMotorPWMSpeedChannel = 4;
const int leftMotorPWMSpeedChannel = 5;

#define SIGNAL_TIMEOUT 1000  // This is signal timeout in milliseconds. We will reset the data if no signal
unsigned long lastRecvTime = 0;

struct PacketData
{
  byte xAxisValue;
  byte yAxisValue;
  byte switchPressed;
};
PacketData receiverData;

bool throttleAndSteeringMode = false;

void setup() {
  Serial.begin(115200);
  SerialBT.begin("ESP32test"); //Bluetooth device name
  Serial.println("The device started, now you can pair it with bluetooth!");

  setUpPinModes();
}


void loop() {
  uint8_t recv_data[sizeof(PacketData)];
  if (SerialBT.available()) {
    SerialBT.readBytes((char*)&receiverData, sizeof(PacketData));
    
Serial.printf("left_x: %d, left_y: %d, \n", receiverData.yAxisValue, receiverData.xAxisValue);

  //    if (receiverData.switchPressed == 1) {
  //     throttleAndSteeringMode = !throttleAndSteeringMode;
  //   }

  //   if (throttleAndSteeringMode) {
  //     throttleAndSteeringMovements();
  //   }else
    
       simpleMovements();
     

     lastRecvTime = millis();
   }
  delay(20);
}

void simpleMovements() {
  if (receiverData.yAxisValue <= 100) {     // Move car Left
  Serial.print("5");
    rotateMotor(MAX_MOTOR_SPEED, -MAX_MOTOR_SPEED);
  } else if (receiverData.yAxisValue >= 150) {   // Move car right
  Serial.print("6");
    rotateMotor(-MAX_MOTOR_SPEED, MAX_MOTOR_SPEED);
  } else if (receiverData.xAxisValue >= 150) {  // Move car forward
  Serial.print("7");
    rotateMotor(MAX_MOTOR_SPEED, MAX_MOTOR_SPEED);
  } else if (receiverData.xAxisValue <= 100) {   // Move car Backward
  Serial.print("8");
    rotateMotor(-MAX_MOTOR_SPEED, -MAX_MOTOR_SPEED);
  } else {                                      // Stop the car
  Serial.print("9");
    rotateMotor(0, 0);
  }
}

// void throttleAndSteeringMovements() {
//   int throttle = map(receiverData.yAxisValue, 254, 0, -255, 255);
//   int steering = map(receiverData.xAxisValue, 0, 254, -255, 255);  
//   int motorDirection = 1;
  
//   if (throttle < 0) {       // Move car backward
//     motorDirection = -1;    
//   }

//   int rightMotorSpeed = abs(throttle) - steering;
//   int leftMotorSpeed = abs(throttle) + steering;
//   rightMotorSpeed = constrain(rightMotorSpeed, 0, 255);
//   leftMotorSpeed = constrain(leftMotorSpeed, 0, 255);

//   rotateMotor(rightMotorSpeed * motorDirection, leftMotorSpeed * motorDirection);
// }


void rotateMotor(int rightMotorSpeed, int leftMotorSpeed) {
  if (leftMotorSpeed != 0  &&  rightMotorSpeed < 0 && leftMotorSpeed < 0) {
    digitalWrite(rightMotorPin1, LOW);
    digitalWrite(rightMotorPin2, HIGH);  

    digitalWrite(leftMotorPin1, LOW);
    digitalWrite(leftMotorPin2, HIGH);  
  } else if (leftMotorSpeed != 0  && rightMotorSpeed > 0 && leftMotorSpeed > 0) {
    digitalWrite(rightMotorPin1, HIGH);
    digitalWrite(rightMotorPin2, LOW);  

    digitalWrite(leftMotorPin1, HIGH);
    digitalWrite(leftMotorPin2, LOW);    
  } else if(leftMotorSpeed != 0  &&  rightMotorSpeed < 0 && leftMotorSpeed > 0){
    digitalWrite(rightMotorPin1, LOW);
    digitalWrite(rightMotorPin2, HIGH);    

    digitalWrite(leftMotorPin1, HIGH);
    digitalWrite(leftMotorPin2, LOW);
  } else if(leftMotorSpeed != 0  &&  rightMotorSpeed > 0 && leftMotorSpeed < 0){
    digitalWrite(rightMotorPin1, HIGH);
    digitalWrite(rightMotorPin2, LOW);    

    digitalWrite(leftMotorPin1, LOW);
    digitalWrite(leftMotorPin2, HIGH);
  }else{
    digitalWrite(rightMotorPin1, LOW);
    digitalWrite(rightMotorPin2, LOW);    

    digitalWrite(leftMotorPin1, LOW);
    digitalWrite(leftMotorPin2, LOW);
  }

  ledcWrite(rightMotorPWMSpeedChannel, abs(rightMotorSpeed));
  ledcWrite(leftMotorPWMSpeedChannel, abs(leftMotorSpeed));    
}

void setUpPinModes() {
  pinMode(enableRightMotor,OUTPUT);
  pinMode(rightMotorPin1, OUTPUT);
  pinMode(rightMotorPin2, OUTPUT);
  
  pinMode(enableLeftMotor,OUTPUT);
  pinMode(leftMotorPin1, OUTPUT);
  pinMode(leftMotorPin2, OUTPUT);

  // Set up PWM for motor speed
  ledcSetup(rightMotorPWMSpeedChannel, PWMFreq, PWMResolution);
  ledcSetup(leftMotorPWMSpeedChannel, PWMFreq, PWMResolution);  
  ledcAttachPin(enableRightMotor, rightMotorPWMSpeedChannel);
  ledcAttachPin(enableLeftMotor, leftMotorPWMSpeedChannel); 
  
 // rotateMotor(0, 0);
}